name: Deploy to Staging

on:
  workflow_run:
    workflows: ["Test Suite"]
    types: [completed]
    branches: [develop]

jobs:
  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    # Only deploy if the Test Suite workflow passed
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    env:
      HOST: ${{ secrets.HOST }}
      USER: ${{ secrets.USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_KEY }}" > ~/.ssh/staging_key
          chmod 600 ~/.ssh/staging_key
          ssh-keyscan -H "$HOST" >> ~/.ssh/known_hosts

      - name: Create Remote Release Directory
        run: |
          RELEASE_ID=$(date +%Y%m%d-%H%M%S)
          echo "RELEASE_ID=$RELEASE_ID" >> $GITHUB_ENV
          ssh -i ~/.ssh/staging_key $USER@$HOST "mkdir -p /opt/auto-author/releases/$RELEASE_ID"

      - name: Rsync source (no dev artifacts)
        run: |
          rsync -az --delete \
            --exclude '.git' \
            --exclude 'node_modules' \
            --exclude '.venv' \
            --exclude '__pycache__' \
            --exclude '*.log' \
            --exclude '.next' \
            ./ $USER@$HOST:/opt/auto-author/releases/${{ env.RELEASE_ID }}/
            
      - name: Run server-side deploy
        run: |
          ssh -i ~/.ssh/staging_key $USER@$HOST \
            "export API_URL='${{ secrets.API_URL }}' && \
             export FRONTEND_URL='${{ secrets.FRONTEND_URL }}' && \
             export CLERK_PUBLISHABLE_KEY='${{ secrets.CLERK_PUBLISHABLE_KEY }}' && \
             export CLERK_SECRET_KEY='${{ secrets.CLERK_SECRET_KEY }}' && \
             export DATABASE_URI='${{ secrets.DATABASE_URI }}' && \
             export DATABASE_NAME='${{ secrets.DATABASE_NAME }}' && \
             export OPENAI_API_KEY='${{ secrets.OPENAI_API_KEY }}' && \
             export CLERK_WEBHOOK_SECRET='${{ secrets.CLERK_WEBHOOK_SECRET }}' && \
             bash /opt/auto-author/releases/${{ env.RELEASE_ID }}/scripts/deploy.sh /opt/auto-author/releases/${{ env.RELEASE_ID }}"


      - name: External Health Checks (with backoff)
        run: |
          for i in {1..10}; do
            curl -f https://api.dev.autoauthor.app/api/v1/health && break || sleep 5
          done
          for i in {1..10}; do
            curl -f https://dev.autoauthor.app && break || sleep 5
          done
          
      - name: Cleanup Local Keys
        if: always()
        run: rm -f ~/.ssh/staging_key

      # Notify deployment success
      - name: Deployment Success Notification
        if: success()
        run: |
          echo "## âœ… Staging Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Staging environment has been updated successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release ID**: ${{ env.RELEASE_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Frontend URL**: https://dev.autoauthor.app" >> $GITHUB_STEP_SUMMARY
          echo "- **API URL**: https://api.dev.autoauthor.app" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "- E2E tests will run automatically post-deployment" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor E2E test results for any issues" >> $GITHUB_STEP_SUMMARY
          echo "- Rollback available: \`bash /opt/auto-author/current/scripts/rollback.sh\`" >> $GITHUB_STEP_SUMMARY

      # Notify deployment failure
      - name: Deployment Failure Notification
        if: failure()
        run: |
          echo "## ðŸš¨ Staging Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Deployment to staging environment failed. Previous version remains active." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Release ID**: ${{ env.RELEASE_ID }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review workflow logs for error details" >> $GITHUB_STEP_SUMMARY
          echo "2. Fix the issue in your branch" >> $GITHUB_STEP_SUMMARY
          echo "3. Push again to trigger a new deployment" >> $GITHUB_STEP_SUMMARY
          echo "4. If staging is broken, verify previous version is still serving" >> $GITHUB_STEP_SUMMARY

      # TODO: Add Slack/Discord webhook notifications
      # - name: Send Deployment Notification
      #   if: always()
      #   run: |
      #     STATUS="${{ job.status }}"
      #     COLOR=$([[ "$STATUS" == "success" ]] && echo "good" || echo "danger")
      #     curl -X POST ${{ secrets.SLACK_WEBHOOK_URL }} \
      #       -H 'Content-Type: application/json' \
      #       -d '{
      #         "channel": "#deployments",
      #         "text": "Staging deployment '$STATUS'",
      #         "attachments": [{
      #           "color": "'$COLOR'",
      #           "fields": [
      #             {"title": "Branch", "value": "${{ github.ref_name }}", "short": true},
      #             {"title": "Release", "value": "${{ env.RELEASE_ID }}", "short": true},
      #             {"title": "Frontend", "value": "https://dev.autoauthor.app", "short": true},
      #             {"title": "API", "value": "https://api.dev.autoauthor.app", "short": true}
      #           ]
      #         }]
      #       }'
